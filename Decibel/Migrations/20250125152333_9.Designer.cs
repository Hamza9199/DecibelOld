// <auto-generated />
using System;
using Decibel.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Decibel.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250125152333_9")]
    partial class _9
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Decibel.Models.Album", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<decimal>("brojLajkova")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)")
                        .HasDefaultValue(0m);

                    b.Property<bool>("javno")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("korisnikID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("kreiranDatumVrijeme")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("odobreno")
                        .HasColumnType("bit");

                    b.Property<string>("opis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("putanjaGif")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("putanjaSlika")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("korisnikID");

                    b.ToTable("Album", (string)null);
                });

            modelBuilder.Entity("Decibel.Models.HistorijaSlusanja", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<int>("kontekstPustanja")
                        .HasColumnType("int");

                    b.Property<string>("kontekstPustanjaURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("korisnikID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("kreiranDatumVrijeme")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("offline")
                        .HasColumnType("bit");

                    b.Property<long>("pjesmaID")
                        .HasColumnType("bigint");

                    b.Property<long?>("playlistaID")
                        .HasColumnType("bigint");

                    b.Property<int>("trajanje")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("korisnikID");

                    b.HasIndex("pjesmaID");

                    b.HasIndex("playlistaID");

                    b.ToTable("HistorijaSlusanja", (string)null);
                });

            modelBuilder.Entity("Decibel.Models.IzvodjacPjesma", b =>
                {
                    b.Property<string>("izvodjacID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("pjesmaID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("kreiranDatumVrijeme")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<bool>("potvrdjeno")
                        .HasColumnType("bit");

                    b.Property<decimal>("udio")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("izvodjacID", "pjesmaID");

                    b.HasIndex("pjesmaID");

                    b.ToTable("IzvodjacPjesma", (string)null);
                });

            modelBuilder.Entity("Decibel.Models.Komentar", b =>
                {
                    b.Property<string>("korisnikID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("pjesmaID")
                        .HasColumnType("bigint");

                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<DateTime?>("kreiranDatumVrijeme")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("tekst")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("vrijemePjesmeSekunde")
                        .HasColumnType("bigint");

                    b.HasKey("korisnikID", "pjesmaID");

                    b.HasIndex("pjesmaID");

                    b.ToTable("Komentar", (string)null);
                });

            modelBuilder.Entity("Decibel.Models.Korisnik", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("bio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("brojPratilaca")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)")
                        .HasDefaultValue(0m);

                    b.Property<DateTime>("datumRegistracije")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("ime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("korisnickoIme")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("obrisan")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("prezime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("putanjaProfilneSlike")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("statusKorisnika")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0);

                    b.Property<DateTime?>("zadnjaPrijava")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.ToTable("Korisnik", (string)null);
                });

            modelBuilder.Entity("Decibel.Models.KorisnikAlbum", b =>
                {
                    b.Property<string>("korisnikID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("albumID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("kreiranDatumVrijeme")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("korisnikID", "albumID");

                    b.HasIndex("albumID");

                    b.ToTable("KorisnikAlbum", (string)null);
                });

            modelBuilder.Entity("Decibel.Models.KorisnikPjesma", b =>
                {
                    b.Property<string>("korisnikID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("pjesmaID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("kreiranDatumVrijeme")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("korisnikID", "pjesmaID");

                    b.HasIndex("pjesmaID");

                    b.ToTable("KorisnikPjesma", (string)null);
                });

            modelBuilder.Entity("Decibel.Models.KorisnikPlayLista", b =>
                {
                    b.Property<string>("korisnikID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("playlistaID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("kreiranDatumVrijeme")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("korisnikID", "playlistaID");

                    b.HasIndex("playlistaID");

                    b.ToTable("KorisnikPlayLista", (string)null);
                });

            modelBuilder.Entity("Decibel.Models.KorisnikPretplata", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<int>("PretplataStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("datumIsteka")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("datumVrijemeObnove")
                        .HasColumnType("datetime2");

                    b.Property<string>("korisnikID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("kreiranDatumVrijeme")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<long>("pretplataID")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("korisnikID")
                        .IsUnique();

                    b.HasIndex("pretplataID");

                    b.ToTable("KorisnikPretplata", (string)null);
                });

            modelBuilder.Entity("Decibel.Models.ObnovaPretplate", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<DateTime>("datumObnove")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("iznosObnove")
                        .HasColumnType("money");

                    b.Property<long>("korisnikPretplataID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("kreiranDatumVrijeme")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("ID");

                    b.HasIndex("korisnikPretplataID");

                    b.ToTable("ObnovaPretplate", (string)null);
                });

            modelBuilder.Entity("Decibel.Models.Pjesma", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<long?>("albumID")
                        .HasColumnType("bigint");

                    b.Property<decimal>("brojLajkova")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)")
                        .HasDefaultValue(0m);

                    b.Property<decimal>("brojReprodukcija")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)")
                        .HasDefaultValue(0m);

                    b.Property<DateOnly>("datumObjave")
                        .HasColumnType("date");

                    b.Property<bool>("eksplicitniSadrzaj")
                        .HasColumnType("bit");

                    b.Property<bool>("javno")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("jezikPjesme")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("korisnikID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("kreiranDatumVrijeme")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("licenca")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("odobreno")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("opis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("putanjaAudio")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("putanjaGif")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("putanjaSlika")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("redniBrojUAlbumu")
                        .HasColumnType("bigint");

                    b.Property<bool>("slazemSe")
                        .HasColumnType("bit");

                    b.Property<string>("tekst")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("trajanjeSekunde")
                        .HasColumnType("bigint");

                    b.HasKey("ID");

                    b.HasIndex("albumID");

                    b.HasIndex("korisnikID");

                    b.ToTable("Pjesma", (string)null);
                });

            modelBuilder.Entity("Decibel.Models.PjesmaPlayLista", b =>
                {
                    b.Property<long>("pjesmaID")
                        .HasColumnType("bigint");

                    b.Property<long>("playlistaID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("kreiranDatumVrijeme")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<long?>("pokazivacNaPrethodnuPjesmuID")
                        .HasColumnType("bigint");

                    b.Property<long?>("pokazivacNaSljedecuPjesmuID")
                        .HasColumnType("bigint");

                    b.HasKey("pjesmaID", "playlistaID");

                    b.HasIndex("playlistaID");

                    b.HasIndex("pokazivacNaPrethodnuPjesmuID");

                    b.HasIndex("pokazivacNaSljedecuPjesmuID");

                    b.ToTable("PjesmaPlayLista", (string)null);
                });

            modelBuilder.Entity("Decibel.Models.PjesmaZanr", b =>
                {
                    b.Property<long>("pjesmaID")
                        .HasColumnType("bigint");

                    b.Property<long>("zanrID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("kreiranDatumVrijeme")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("pjesmaID", "zanrID");

                    b.HasIndex("zanrID");

                    b.ToTable("PjesmaZanr", (string)null);
                });

            modelBuilder.Entity("Decibel.Models.PlayLista", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<decimal>("brojLajkova")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(20,0)")
                        .HasDefaultValue(0m);

                    b.Property<bool>("javno")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("korisnikID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("kreiranDatumVrijeme")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("opis")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("putanjaGif")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("putanjaSlika")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("korisnikID");

                    b.ToTable("PlayLista", (string)null);
                });

            modelBuilder.Entity("Decibel.Models.PratilacKorisnik", b =>
                {
                    b.Property<string>("korisnikID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("pratilacID")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("kreiranDatumVrijeme")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("korisnikID", "pratilacID");

                    b.HasIndex("pratilacID");

                    b.ToTable("PratilacKorisnik", (string)null);
                });

            modelBuilder.Entity("Decibel.Models.Pretplata", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<decimal>("cijena")
                        .HasColumnType("money");

                    b.Property<bool>("dostupno")
                        .HasColumnType("bit");

                    b.Property<DateTime>("kreiranDatumVrijeme")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("opis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Pretplata", (string)null);
                });

            modelBuilder.Entity("Decibel.Models.RedoslijedPjesama", b =>
                {
                    b.Property<long>("redoslijedPjesama")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("redoslijedPjesama"));

                    b.Property<DateTime>("kreiranDatumVrijeme")
                        .HasColumnType("datetime2");

                    b.Property<long>("pjesmaID")
                        .HasColumnType("bigint");

                    b.Property<long>("playlistaID")
                        .HasColumnType("bigint");

                    b.Property<long?>("pokazivacNaPrethodnuPjesmuID")
                        .HasColumnType("bigint");

                    b.Property<long>("pokazivacNaSljedecuPjesmuID")
                        .HasColumnType("bigint");

                    b.HasKey("redoslijedPjesama");

                    b.ToTable("RedoslijedPjesama");
                });

            modelBuilder.Entity("Decibel.Models.StatistikaReprodukcije", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<int>("brojReprodukcija")
                        .HasColumnType("int");

                    b.Property<string>("korisnikID")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<long>("pjesmaID")
                        .HasColumnType("bigint");

                    b.Property<int>("ukupnoTrajanje")
                        .HasColumnType("int");

                    b.Property<DateTime>("zadnjePustanje")
                        .HasColumnType("datetime2");

                    b.HasKey("ID");

                    b.HasIndex("korisnikID");

                    b.HasIndex("pjesmaID");

                    b.ToTable("StatistikaReprodukcije", (string)null);
                });

            modelBuilder.Entity("Decibel.Models.Zanr", b =>
                {
                    b.Property<long>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ID"));

                    b.Property<DateTime>("kreiranDatumVrijeme")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("opis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Zanr", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Decibel.Models.Album", b =>
                {
                    b.HasOne("Decibel.Models.Korisnik", "Korisnik")
                        .WithMany("Album")
                        .HasForeignKey("korisnikID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Korisnik");
                });

            modelBuilder.Entity("Decibel.Models.HistorijaSlusanja", b =>
                {
                    b.HasOne("Decibel.Models.Korisnik", null)
                        .WithMany("HistorijaSlusanja")
                        .HasForeignKey("korisnikID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Decibel.Models.Pjesma", null)
                        .WithMany("HistorijaSlusanja")
                        .HasForeignKey("pjesmaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Decibel.Models.PlayLista", null)
                        .WithMany("HistorijaSlusanja")
                        .HasForeignKey("playlistaID");
                });

            modelBuilder.Entity("Decibel.Models.IzvodjacPjesma", b =>
                {
                    b.HasOne("Decibel.Models.Korisnik", "Izvodjac")
                        .WithMany("IzvodjacPjesma")
                        .HasForeignKey("izvodjacID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Decibel.Models.Pjesma", "Pjesma")
                        .WithMany("IzvodjacPjesma")
                        .HasForeignKey("pjesmaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Izvodjac");

                    b.Navigation("Pjesma");
                });

            modelBuilder.Entity("Decibel.Models.Komentar", b =>
                {
                    b.HasOne("Decibel.Models.Korisnik", "Korisnik")
                        .WithMany("Komentar")
                        .HasForeignKey("korisnikID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Decibel.Models.Pjesma", "Pjesma")
                        .WithMany("Komentar")
                        .HasForeignKey("pjesmaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Korisnik");

                    b.Navigation("Pjesma");
                });

            modelBuilder.Entity("Decibel.Models.Korisnik", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", "AspNetUser")
                        .WithOne()
                        .HasForeignKey("Decibel.Models.Korisnik", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AspNetUser");
                });

            modelBuilder.Entity("Decibel.Models.KorisnikAlbum", b =>
                {
                    b.HasOne("Decibel.Models.Album", "Album")
                        .WithMany()
                        .HasForeignKey("albumID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Decibel.Models.Korisnik", "Korisnik")
                        .WithMany()
                        .HasForeignKey("korisnikID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Album");

                    b.Navigation("Korisnik");
                });

            modelBuilder.Entity("Decibel.Models.KorisnikPjesma", b =>
                {
                    b.HasOne("Decibel.Models.Korisnik", "Korisnik")
                        .WithMany("KorisnikPjesma")
                        .HasForeignKey("korisnikID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Decibel.Models.Pjesma", "Pjesma")
                        .WithMany("KorisnikPjesma")
                        .HasForeignKey("pjesmaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Korisnik");

                    b.Navigation("Pjesma");
                });

            modelBuilder.Entity("Decibel.Models.KorisnikPlayLista", b =>
                {
                    b.HasOne("Decibel.Models.Korisnik", "Korisnik")
                        .WithMany()
                        .HasForeignKey("korisnikID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Decibel.Models.PlayLista", "PlayLista")
                        .WithMany()
                        .HasForeignKey("playlistaID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Korisnik");

                    b.Navigation("PlayLista");
                });

            modelBuilder.Entity("Decibel.Models.KorisnikPretplata", b =>
                {
                    b.HasOne("Decibel.Models.Korisnik", "Korisnik")
                        .WithMany()
                        .HasForeignKey("korisnikID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Decibel.Models.Pretplata", "Pretplata")
                        .WithMany()
                        .HasForeignKey("pretplataID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Korisnik");

                    b.Navigation("Pretplata");
                });

            modelBuilder.Entity("Decibel.Models.ObnovaPretplate", b =>
                {
                    b.HasOne("Decibel.Models.KorisnikPretplata", "KorisnikPretplata")
                        .WithMany()
                        .HasForeignKey("korisnikPretplataID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("KorisnikPretplata");
                });

            modelBuilder.Entity("Decibel.Models.Pjesma", b =>
                {
                    b.HasOne("Decibel.Models.Album", "Album")
                        .WithMany("Pjesma")
                        .HasForeignKey("albumID");

                    b.HasOne("Decibel.Models.Korisnik", "Korisnik")
                        .WithMany("Pjesma")
                        .HasForeignKey("korisnikID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Album");

                    b.Navigation("Korisnik");
                });

            modelBuilder.Entity("Decibel.Models.PjesmaPlayLista", b =>
                {
                    b.HasOne("Decibel.Models.Pjesma", "Pjesma")
                        .WithMany("PjesmaPlayLista")
                        .HasForeignKey("pjesmaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Decibel.Models.PlayLista", "PlayLista")
                        .WithMany("PjesmaPlayLista")
                        .HasForeignKey("playlistaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Decibel.Models.Pjesma", "prethodnaPjesma")
                        .WithMany()
                        .HasForeignKey("pokazivacNaPrethodnuPjesmuID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Decibel.Models.Pjesma", "sljedecaPjesma")
                        .WithMany()
                        .HasForeignKey("pokazivacNaSljedecuPjesmuID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Pjesma");

                    b.Navigation("PlayLista");

                    b.Navigation("prethodnaPjesma");

                    b.Navigation("sljedecaPjesma");
                });

            modelBuilder.Entity("Decibel.Models.PjesmaZanr", b =>
                {
                    b.HasOne("Decibel.Models.Pjesma", "Pjesma")
                        .WithMany("PjesmaZanr")
                        .HasForeignKey("pjesmaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Decibel.Models.Zanr", "Zanr")
                        .WithMany("PjesmaZanr")
                        .HasForeignKey("zanrID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pjesma");

                    b.Navigation("Zanr");
                });

            modelBuilder.Entity("Decibel.Models.PlayLista", b =>
                {
                    b.HasOne("Decibel.Models.Korisnik", "Korisnik")
                        .WithMany("PlayLista")
                        .HasForeignKey("korisnikID");

                    b.Navigation("Korisnik");
                });

            modelBuilder.Entity("Decibel.Models.PratilacKorisnik", b =>
                {
                    b.HasOne("Decibel.Models.Korisnik", "Korisnik")
                        .WithMany()
                        .HasForeignKey("korisnikID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Decibel.Models.Korisnik", "Pratilac")
                        .WithMany()
                        .HasForeignKey("pratilacID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Korisnik");

                    b.Navigation("Pratilac");
                });

            modelBuilder.Entity("Decibel.Models.StatistikaReprodukcije", b =>
                {
                    b.HasOne("Decibel.Models.Korisnik", null)
                        .WithMany("StatistikaReprodukcije")
                        .HasForeignKey("korisnikID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Decibel.Models.Pjesma", null)
                        .WithMany("StatistikaReprodukcije")
                        .HasForeignKey("pjesmaID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Decibel.Models.Album", b =>
                {
                    b.Navigation("Pjesma");
                });

            modelBuilder.Entity("Decibel.Models.Korisnik", b =>
                {
                    b.Navigation("Album");

                    b.Navigation("HistorijaSlusanja");

                    b.Navigation("IzvodjacPjesma");

                    b.Navigation("Komentar");

                    b.Navigation("KorisnikPjesma");

                    b.Navigation("Pjesma");

                    b.Navigation("PlayLista");

                    b.Navigation("StatistikaReprodukcije");
                });

            modelBuilder.Entity("Decibel.Models.Pjesma", b =>
                {
                    b.Navigation("HistorijaSlusanja");

                    b.Navigation("IzvodjacPjesma");

                    b.Navigation("Komentar");

                    b.Navigation("KorisnikPjesma");

                    b.Navigation("PjesmaPlayLista");

                    b.Navigation("PjesmaZanr");

                    b.Navigation("StatistikaReprodukcije");
                });

            modelBuilder.Entity("Decibel.Models.PlayLista", b =>
                {
                    b.Navigation("HistorijaSlusanja");

                    b.Navigation("PjesmaPlayLista");
                });

            modelBuilder.Entity("Decibel.Models.Zanr", b =>
                {
                    b.Navigation("PjesmaZanr");
                });
#pragma warning restore 612, 618
        }
    }
}
